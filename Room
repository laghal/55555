class Room
{
  float alpha;
  int region;
  int ground;
  int id;
  float doorSize;
  int groundColor;
  float size;
  boolean glitch;  
  
  Room()
  {
    alpha=0;
    ground=1;
    region=0;
    id=0;
    groundColor=2;
    glitch = false;
  }
    
  void draw()
  {
    size = (height/1.2)-(height/10)+(height/55)*cos(alpha*2);  
    doorSize = (titleScreen.av/256)*size/7;
    rectMode(CENTER);
    strokeWeight(height/50);
    
    if(glitch)
    {
      fill(random(0,2)*55,0,random(0,2)*55);
      stroke(random(0,2)*105,0,random(0,2)*105);
    }
    else
    {
      stroke(region*(1-ceil(((id%5)-0.1)/5))*255);
      fill(255-region*(1-ceil(((id%5)-0.1)/5))*255);
    }   
    
    pushMatrix();
    translate(-laghal.x+width/2, -laghal.y+height/2);
    if(!titleScreen.gameStarted)
    {
      if(titleScreen.press && titleScreen.background<255)
      {
        alpha-=(alpha/5)+(PI/1000);
        if(alpha<0.05&&alpha>-0.05)
          alpha=0;
      }
      rotate(alpha);
    }

    rect(0, 0, size, size);     
    noStroke();
    rect(0, 0, size+height/50, doorSize*2);
    rect(0, 0, doorSize*2, size+height/50);
        
    textSize(height/10);
    if(glitch)
    {
      strokeWeight(height/150);
      fill(random(0,2)*127,random(0,2)*127,random(0,2)*127);
      stroke(random(1,2)*127,0,random(1,2)*127); //?????????
    }
    else
    {
      fill(region*(1-ceil(((id%5)-0.1)/5))*255,region*(1-ceil(((id%5)-0.1)/5))*255,region*(1-ceil(((id%5)-0.1)/5))*255,titleScreen.av);
    }
    if(id>99)
    {
      text(id, 0, 0);
    }
    else if(id>9)
    {
      text("0"+id,0,0);
    }
    else
    {
      text("00"+id,0,0);
    }
    if(glitch)
    {
      gl.draw();
    }           
    popMatrix(); 
    
    if(titleScreen.background<255&&titleScreen.gameStarted) //Transition
    {
        titleScreen.background+=15;
        fill(region*255,region*255,region*255,(255-titleScreen.background));
        noStroke();        
        rect(width/2,height/2,width,height);
    }
    alpha=(alpha+PI/1000)%(2*PI);
  }
}
